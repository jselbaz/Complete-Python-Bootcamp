def lesser_of_two_evens(a,b):
        if (a + b) % 2 == 0:
                return min(a,b)
        else:
                return max(a,b)
                
print(lesser_of_two_evens(2,4))
print(lesser_of_two_evens(2,5))

def animal_crackers(string):
        str = string.lower().split()
        return str[0][0] == str[1][0]
         
print(animal_crackers('Levelheaded Llama'))
print(animal_crackers('Crazy Kangaroo'))

def makes_twenty(a,b):
        return a + b == 20 or a == 20 or b == 20
                
print(makes_twenty(20,10))
print(makes_twenty(12,8))
print(makes_twenty(2,3))

def old_macdonald(name):
        str = name[0].upper()+name[1:3]+name[3].upper()+name[4:]
        return str
        
print(old_macdonald('macdonald'))

def master_yoda(string):
        yoda = string.split()
        rev_yoda = yoda[::-1]
        return ' '.join(rev_yoda)
        
print(master_yoda('I am home'))
print(master_yoda('We are ready'))    

def almost_there(num):
        if num in range (90, 101) or num in range (100, 111):
                return True
        elif num in range (190, 201) or num in range (200, 211):
                return True
        else:
                return False
              
def almost_there(num):
        return (abs(100 - num) <= 10 or abs (200 - num) <= 10)       

print(almost_there(90))
print(almost_there(104))
print(almost_there(150))
print(almost_there(209))        

def has_33(nums):
        for x in range(len(nums) - 1):
                if (nums[x] == 3) and (nums[x+1] == 3):
                        return True
        return False
                        
                        
print(has_33([1, 3, 3]))
print(has_33([1, 3, 1, 3]))
print(has_33([3, 1, 3]))                  

def paper_doll(text):
        new_text = [letter * 3 for letter in text]
        return ''.join(new_text)
                
print(paper_doll('Hello'))
print(paper_doll('Mississippi'))

def blackjack(a,b,c):
        sum = a + b + c
        if sum <= 21:
                return sum
        elif sum > 21 and (a == 11 or b == 11 or c == 11):
                sum -= 10
                if sum > 21:
                        return 'BUST'
                else:
                        return sum
        else:
                return 'BUST'

def blackjack(a, b, c):
        if sum([a,b,c]) <= 21:
                return sum([a,b,c])
        elif 11 in [a,b,c] and sum([a,b,c]) <= 31:
                return sum([a,b,c]) - 10
        else:
                return 'BUST'
                        
print(blackjack(5,6,7))
print(blackjack(9,9,9))
print(blackjack(9,9,11))

def summer_69(list):
        sum = 0
        if list == []:
                return 0
        new_list = [x for x in list if x < 6 or x > 9]
        for x in new_list:
                sum += x
        return sum

print(summer_69([1, 3, 5]))
print(summer_69([4, 5, 6, 7, 8, 9])) 
print(summer_69([2, 1, 6, 9, 11]))

def spy_game(list):
        bond = []
        for num in list:
                if num == 0 or num == 7:
                        bond.append(num)              
        return bond == [0, 0, 7]
    
def spy_game(list):
        code = [0, 0, 7, 'x']
        for x in list:
                if x == code[0]:
                        code.pop(0)
                                
        return len(code) == 1
        
print(spy_game([1,2,4,0,0,7,5]))        
print(spy_game([1,0,2,4,0,5,7]))
print(spy_game([1,7,2,0,4,5,0]))


def count_primes(number):
        if number < 2:
                return 0
        primes = [2]
        x = 3
        while x <= number:
                for y in primes:
                        if x % y == 0:
                                x += 2
                                break
                else: 
                        primes.append(x)
                        x += 2
        print(primes)
        return len(primes)
        
print(count_primes(100))

def print_big(letter):
        patterns = {1 : '  *  ', 2 : ' * * ', 3: '*   *', 4: '*****', 5: '****', 6: '   * ', 7: ' *    ', 8:'*   * ', 9:'*    '}
        alphabet = {'A':[1,2,4,3,3], 'B':[5,3,3,3,5], 'C':[4,9,9,9,4], 'D':[5,3,3,3,5], 'E':[4,9,4,9,4]}
        for pattern in alphabet[letter.upper()]:
                print(patterns[pattern])
               
print_big('a')
